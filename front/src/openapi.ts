/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */

import type { AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";

export interface ActivationFunctionResponse {
	activations: ActivationInputOutputPair[];
}

/**
 * Represents the output of an activation function given a particular input.

More details: [here](https://stats.stackexchange.com/a/391685)
 */
export interface ActivationInputOutputPair {
	/** Input to an activation function */
	pre_activation: number;
	/** Output of an activation function */
	activation: number;
}

export interface HTTPValidationError {
	detail?: ValidationError[];
}

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
	loc: ValidationErrorLocItem[];
	msg: string;
	type: string;
}

export type GetActivationFunctionActivationFunctionActivationFunctionNameGetParams =
	{
		/**
		 * Minimum value to generate activations from.
		 */
		min: number;
		/**
		 * Maximum value to generate activations from.
		 */
		max: number;
		/**
		 * Step between each input value. For instance, a step of 0.1 would generate activations for inputs -1.0, -0.9, ...
		 */
		step: number;
	};

/**
 * Stores HF Hub User Access Token as an httpOnly secure cookie.
 * @summary Post Access Token
 */
export const postAccessTokenAccessTokenPost = <TData = AxiosResponse<unknown>>(
	options?: AxiosRequestConfig,
): Promise<TData> => {
	return axios.post(`/access-token`, undefined, options);
};

/**
 * Deletes the HF Hub User Access Token stored as an httpOnly secure cookie.
 * @summary Delete Access Token
 */
export const deleteAccessTokenAccessTokenDelete = <TData = AxiosResponse<void>>(
	options?: AxiosRequestConfig,
): Promise<TData> => {
	return axios.delete(`/access-token`, options);
};

/**
 * Checks whether the user has an HF Hub User Access Token stored as an httpOnly cookie, or not. It does **NOT** check the validity of this token. Validity is checked when setting up the cookie, and can be verified when the token is used.
 * @summary Get Access Token
 */
export const getAccessTokenAccessTokenGet = <TData = AxiosResponse<void>>(
	options?: AxiosRequestConfig,
): Promise<TData> => {
	return axios.get(`/access-token`, options);
};

/**
 * This function takes as input a range (min, max) and a step. For each value in this interval, it will apply the activation function, and return all the associated activations. This allows you to plot the activation function.
 * @summary Get Activation Function
 */
export const getActivationFunctionActivationFunctionActivationFunctionNameGet =
	<TData = AxiosResponse<ActivationFunctionResponse>>(
		activationFunctionName: string,
		params: GetActivationFunctionActivationFunctionActivationFunctionNameGetParams,
		options?: AxiosRequestConfig,
	): Promise<TData> => {
		return axios.get(`/activation-function/${activationFunctionName}`, {
			...options,
			params: { ...params, ...options?.params },
		});
	};

export type PostAccessTokenAccessTokenPostResult = AxiosResponse<unknown>;
export type DeleteAccessTokenAccessTokenDeleteResult = AxiosResponse<void>;
export type GetAccessTokenAccessTokenGetResult = AxiosResponse<void>;
export type GetActivationFunctionActivationFunctionActivationFunctionNameGetResult =
	AxiosResponse<ActivationFunctionResponse>;

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ApiProxyRouteImport } from './routes/api-proxy'
import { Route as ActivationFunctionRouteImport } from './routes/activation-function'
import { Route as IndexRouteImport } from './routes/index'

const ApiProxyRoute = ApiProxyRouteImport.update({
  id: '/api-proxy',
  path: '/api-proxy',
  getParentRoute: () => rootRouteImport,
} as any)
const ActivationFunctionRoute = ActivationFunctionRouteImport.update({
  id: '/activation-function',
  path: '/activation-function',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/activation-function': typeof ActivationFunctionRoute
  '/api-proxy': typeof ApiProxyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/activation-function': typeof ActivationFunctionRoute
  '/api-proxy': typeof ApiProxyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/activation-function': typeof ActivationFunctionRoute
  '/api-proxy': typeof ApiProxyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/activation-function' | '/api-proxy'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/activation-function' | '/api-proxy'
  id: '__root__' | '/' | '/activation-function' | '/api-proxy'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ActivationFunctionRoute: typeof ActivationFunctionRoute
  ApiProxyRoute: typeof ApiProxyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/api-proxy': {
      id: '/api-proxy'
      path: '/api-proxy'
      fullPath: '/api-proxy'
      preLoaderRoute: typeof ApiProxyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/activation-function': {
      id: '/activation-function'
      path: '/activation-function'
      fullPath: '/activation-function'
      preLoaderRoute: typeof ActivationFunctionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActivationFunctionRoute: ActivationFunctionRoute,
  ApiProxyRoute: ApiProxyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ApiProxyRouteImport } from './routes/api-proxy'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ActivationFunctionsIndexRouteImport } from './routes/activation-functions/index'
import { Route as ActivationFunctionsActivationFunctionIdRouteImport } from './routes/activation-functions/$activationFunctionId'

const ApiProxyRoute = ApiProxyRouteImport.update({
  id: '/api-proxy',
  path: '/api-proxy',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ActivationFunctionsIndexRoute =
  ActivationFunctionsIndexRouteImport.update({
    id: '/activation-functions/',
    path: '/activation-functions/',
    getParentRoute: () => rootRouteImport,
  } as any)
const ActivationFunctionsActivationFunctionIdRoute =
  ActivationFunctionsActivationFunctionIdRouteImport.update({
    id: '/activation-functions/$activationFunctionId',
    path: '/activation-functions/$activationFunctionId',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api-proxy': typeof ApiProxyRoute
  '/activation-functions/$activationFunctionId': typeof ActivationFunctionsActivationFunctionIdRoute
  '/activation-functions': typeof ActivationFunctionsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api-proxy': typeof ApiProxyRoute
  '/activation-functions/$activationFunctionId': typeof ActivationFunctionsActivationFunctionIdRoute
  '/activation-functions': typeof ActivationFunctionsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/api-proxy': typeof ApiProxyRoute
  '/activation-functions/$activationFunctionId': typeof ActivationFunctionsActivationFunctionIdRoute
  '/activation-functions/': typeof ActivationFunctionsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api-proxy'
    | '/activation-functions/$activationFunctionId'
    | '/activation-functions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api-proxy'
    | '/activation-functions/$activationFunctionId'
    | '/activation-functions'
  id:
    | '__root__'
    | '/'
    | '/api-proxy'
    | '/activation-functions/$activationFunctionId'
    | '/activation-functions/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiProxyRoute: typeof ApiProxyRoute
  ActivationFunctionsActivationFunctionIdRoute: typeof ActivationFunctionsActivationFunctionIdRoute
  ActivationFunctionsIndexRoute: typeof ActivationFunctionsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/api-proxy': {
      id: '/api-proxy'
      path: '/api-proxy'
      fullPath: '/api-proxy'
      preLoaderRoute: typeof ApiProxyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/activation-functions/': {
      id: '/activation-functions/'
      path: '/activation-functions'
      fullPath: '/activation-functions'
      preLoaderRoute: typeof ActivationFunctionsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/activation-functions/$activationFunctionId': {
      id: '/activation-functions/$activationFunctionId'
      path: '/activation-functions/$activationFunctionId'
      fullPath: '/activation-functions/$activationFunctionId'
      preLoaderRoute: typeof ActivationFunctionsActivationFunctionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiProxyRoute: ApiProxyRoute,
  ActivationFunctionsActivationFunctionIdRoute:
    ActivationFunctionsActivationFunctionIdRoute,
  ActivationFunctionsIndexRoute: ActivationFunctionsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.ts'
declare module '@tanstack/react-start' {
  interface Register {
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
